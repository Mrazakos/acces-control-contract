/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AccessControlInterface extends utils.Interface {
  functions: {
    "fetchPublicKey(uint256)": FunctionFragment;
    "getOwner(uint256)": FunctionFragment;
    "getRevokedSignatures(uint256)": FunctionFragment;
    "getTotalLocks()": FunctionFragment;
    "isSignatureRevoked(uint256,string)": FunctionFragment;
    "lockExistsView(uint256)": FunctionFragment;
    "locks(uint256)": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "registerLock(string)": FunctionFragment;
    "revokeSignature(uint256,string)": FunctionFragment;
    "revokedSignatures(uint256,string)": FunctionFragment;
    "transferOwnership(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fetchPublicKey"
      | "getOwner"
      | "getRevokedSignatures"
      | "getTotalLocks"
      | "isSignatureRevoked"
      | "lockExistsView"
      | "locks"
      | "owners"
      | "registerLock"
      | "revokeSignature"
      | "revokedSignatures"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fetchPublicKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevokedSignatures",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSignatureRevoked",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockExistsView",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "locks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerLock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSignature",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedSignatures",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "fetchPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRevokedSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSignatureRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockExistsView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokedSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LockRegistered(uint256,address,string)": EventFragment;
    "OwnershipTransferred(uint256,address,address)": EventFragment;
    "SignatureRevoked(uint256,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignatureRevoked"): EventFragment;
}

export interface LockRegisteredEventObject {
  lockId: BigNumber;
  owner: string;
  publicKey: string;
}
export type LockRegisteredEvent = TypedEvent<
  [BigNumber, string, string],
  LockRegisteredEventObject
>;

export type LockRegisteredEventFilter = TypedEventFilter<LockRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  lockId: BigNumber;
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [BigNumber, string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SignatureRevokedEventObject {
  lockId: BigNumber;
  signature: string;
  owner: string;
}
export type SignatureRevokedEvent = TypedEvent<
  [BigNumber, string, string],
  SignatureRevokedEventObject
>;

export type SignatureRevokedEventFilter =
  TypedEventFilter<SignatureRevokedEvent>;

export interface AccessControl extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccessControlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fetchPublicKey(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwner(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRevokedSignatures(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getTotalLocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    isSignatureRevoked(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockExistsView(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    locks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerLock(
      publicKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeSignature(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokedSignatures(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fetchPublicKey(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwner(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRevokedSignatures(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalLocks(overrides?: CallOverrides): Promise<BigNumber>;

  isSignatureRevoked(
    lockId: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockExistsView(
    lockId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  locks(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerLock(
    publicKey: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeSignature(
    lockId: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokedSignatures(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    lockId: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fetchPublicKey(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwner(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRevokedSignatures(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalLocks(overrides?: CallOverrides): Promise<BigNumber>;

    isSignatureRevoked(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockExistsView(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    locks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerLock(
      publicKey: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeSignature(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokedSignatures(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LockRegistered(uint256,address,string)"(
      lockId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      publicKey?: null
    ): LockRegisteredEventFilter;
    LockRegistered(
      lockId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      publicKey?: null
    ): LockRegisteredEventFilter;

    "OwnershipTransferred(uint256,address,address)"(
      lockId?: PromiseOrValue<BigNumberish> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      lockId?: PromiseOrValue<BigNumberish> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SignatureRevoked(uint256,string,address)"(
      lockId?: PromiseOrValue<BigNumberish> | null,
      signature?: null,
      owner?: PromiseOrValue<string> | null
    ): SignatureRevokedEventFilter;
    SignatureRevoked(
      lockId?: PromiseOrValue<BigNumberish> | null,
      signature?: null,
      owner?: PromiseOrValue<string> | null
    ): SignatureRevokedEventFilter;
  };

  estimateGas: {
    fetchPublicKey(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokedSignatures(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalLocks(overrides?: CallOverrides): Promise<BigNumber>;

    isSignatureRevoked(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockExistsView(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerLock(
      publicKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeSignature(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokedSignatures(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fetchPublicKey(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevokedSignatures(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalLocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSignatureRevoked(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockExistsView(
      lockId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locks(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerLock(
      publicKey: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeSignature(
      lockId: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokedSignatures(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      lockId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
